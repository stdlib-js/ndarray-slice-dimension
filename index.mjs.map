{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isUndefined from '@stdlib/assert-is-undefined';\nimport isSlice from '@stdlib/assert-is-slice';\nimport isNull from '@stdlib/assert-is-null';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport Slice from '@stdlib/slice-ctor';\nimport base from '@stdlib/ndarray-base-slice-dimension';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Returns a read-only view of an input ndarray when sliced along a specified dimension.\n*\n* @param {ndarray} x - input array\n* @param {integer} dim - index of dimension to slice\n* @param {(Slice|integer|null|undefined)} s - slice argument\n* @param {Options} [options] - options\n* @param {boolean} [options.strict] - boolean indicating whether to enforce strict bounds checking\n* @throws {TypeError} first argument must be an ndarray having one or more dimensions\n* @throws {TypeError} second argument must be an integer\n* @throws {TypeError} third argument must be either a Slice, integer, null, or undefined\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*\n* @example\n* import Slice from '@stdlib/slice-ctor';\n* import ndarray from '@stdlib/ndarray-ctor';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <ndarray>\n*\n* var sh = x.shape;\n* // returns [ 3, 2 ]\n*\n* var arr = ndarray2array( x );\n* // returns [ [ 1.0, 2.0 ], [ 3.0, 4.0 ], [ 5.0, 6.0 ] ]\n*\n* var s = new Slice( null, null, -1 );\n* // returns <Slice>\n*\n* var y = sliceDimension( x, 0, s );\n* // returns <ndarray>\n*\n* sh = y.shape;\n* // returns [ 3, 2 ]\n*\n* arr = ndarray2array( y );\n* // returns [ [ 5.0, 6.0 ], [ 3.0, 4.0 ], [ 1.0, 2.0 ] ]\n*/\nfunction sliceDimension( x, dim, s ) {\n\tvar options;\n\tvar slice;\n\tvar opts;\n\n\topts = {\n\t\t'strict': true\n\t};\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( !isInteger( dim ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', dim ) );\n\t}\n\tif ( isInteger( s ) || isSlice( s ) ) {\n\t\tslice = s;\n\t} else if ( isNull( s ) || isUndefined( s ) ) {\n\t\tslice = new Slice();\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be either a Slice, integer, null, or undefined. Value: `%s`.', s ) );\n\t}\n\tif ( arguments.length > 3 ) {\n\t\toptions = arguments[ 3 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'strict' ) ) {\n\t\t\tif ( !isBoolean( options.strict ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'strict', options.strict ) );\n\t\t\t}\n\t\t\topts.strict = options.strict;\n\t\t}\n\t}\n\treturn base( x, dim, slice, opts.strict, false );\n}\n\n\n// EXPORTS //\n\nexport default sliceDimension;\n"],"names":["sliceDimension","x","dim","s","options","slice","opts","strict","isndarrayLike","TypeError","format","isInteger","isSlice","isNull","isUndefined","Slice","arguments","length","isPlainObject","hasOwnProp","isBoolean","base"],"mappings":";;+hCAqFA,SAASA,EAAgBC,EAAGC,EAAKC,GAChC,IAAIC,EACAC,EACAC,EAKJ,GAHAA,EAAO,CACNC,QAAU,IAELC,EAAeP,GACpB,MAAM,IAAIQ,UAAWC,EAAQ,oEAAqET,IAEnG,IAAMU,EAAWT,GAChB,MAAM,IAAIO,UAAWC,EAAQ,qEAAsER,IAEpG,GAAKS,EAAWR,IAAOS,EAAST,GAC/BE,EAAQF,MACF,KAAKU,EAAQV,KAAOW,EAAaX,GAGvC,MAAM,IAAIM,UAAWC,EAAQ,qGAAsGP,IAFnIE,EAAQ,IAAIU,CAGZ,CACD,GAAKC,UAAUC,OAAS,EAAI,CAE3B,IAAMC,EADNd,EAAUY,UAAW,IAEpB,MAAM,IAAIP,UAAWC,EAAQ,qEAAsEN,IAEpG,GAAKe,EAAYf,EAAS,UAAa,CACtC,IAAMgB,EAAWhB,EAAQG,QACxB,MAAM,IAAIE,UAAWC,EAAQ,+DAAgE,SAAUN,EAAQG,SAEhHD,EAAKC,OAASH,EAAQG,MACtB,CACD,CACD,OAAOc,EAAMpB,EAAGC,EAAKG,EAAOC,EAAKC,QAAQ,EAC1C"}